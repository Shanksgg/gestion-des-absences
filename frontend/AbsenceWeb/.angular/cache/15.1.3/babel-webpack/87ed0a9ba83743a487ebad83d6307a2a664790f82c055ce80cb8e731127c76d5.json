{"ast":null,"code":"import _asyncToGenerator from \"D:/Files/EMSI/S9/JEE/gestion-des-absences/frontend/AbsenceWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { KeycloakAuthGuard } from 'keycloak-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"keycloak-angular\";\nexport class AuthGuard extends KeycloakAuthGuard {\n  constructor(router, keycloak) {\n    super(router, keycloak);\n    this.router = router;\n    this.keycloak = keycloak;\n  }\n  isAccessAllowed(route, state) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (!_this.authenticated) {\n        yield _this.keycloak.login({\n          redirectUri: window.location.origin + state.url\n        });\n      }\n      const requiredRoles = route.data['roles'];\n      if (!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\n        return true;\n      }\n      return requiredRoles.every(role => _this.roles.includes(role));\n    })();\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.KeycloakService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAASA,iBAAiB,QAAyB,kBAAkB;;;;AAKrE,OAAM,MAAOC,SAAU,SAAQD,iBAAiB;EAC9CE,YACgCC,MAAc,EACvBC,QAAyB;IAE5C,KAAK,CAACD,MAAM,EAAEC,QAAQ,CAAC;IAHK,WAAM,GAAND,MAAM;IACf,aAAQ,GAARC,QAAQ;EAG/B;EAEaC,eAAe,CACxBC,KAA6B,EAC7BC,KAA0B;IAAA;IAAA;MAE5B,IAAG,CAAC,KAAI,CAACC,aAAa,EAAE;QACtB,MAAM,KAAI,CAACJ,QAAQ,CAACK,KAAK,CAAC;UACxBC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAGN,KAAK,CAACO;SAC7C,CAAC;;MAGJ,MAAMC,aAAa,GAAGT,KAAK,CAACU,IAAI,CAAC,OAAO,CAAC;MAEzC,IAAG,EAAED,aAAa,YAAYE,KAAK,CAAC,IAAIF,aAAa,CAACG,MAAM,KAAK,CAAC,EAAE;QAClE,OAAO,IAAI;;MAEb,OAAOH,aAAa,CAACI,KAAK,CAAEC,IAAI,IAAK,KAAI,CAACC,KAAK,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC;IAAC;EAClE;;AAxBWnB,SAAU;mBAAVA,SAAS;AAAA;AAATA,SAAU;SAAVA,SAAS;EAAAsB,SAATtB,SAAS;EAAAuB,YAFR;AAAM","names":["KeycloakAuthGuard","AuthGuard","constructor","router","keycloak","isAccessAllowed","route","state","authenticated","login","redirectUri","window","location","origin","url","requiredRoles","data","Array","length","every","role","roles","includes","factory","providedIn"],"sourceRoot":"","sources":["D:\\Files\\EMSI\\S9\\JEE\\gestion-des-absences\\frontend\\AbsenceWeb\\src\\app\\guards\\security.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { KeycloakAuthGuard, KeycloakService } from 'keycloak-angular'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard extends KeycloakAuthGuard{\r\n  constructor(\r\n      protected override readonly router: Router,\r\n      protected readonly keycloak: KeycloakService\r\n  ) {\r\n      super(router, keycloak);\r\n  }\r\n\r\n  public async isAccessAllowed(\r\n      route: ActivatedRouteSnapshot,\r\n      state: RouterStateSnapshot\r\n  ) {\r\n    if(!this.authenticated) {\r\n      await this.keycloak.login({\r\n        redirectUri: window.location.origin + state.url\r\n      });\r\n    }\r\n\r\n    const requiredRoles = route.data['roles'];\r\n\r\n    if(!(requiredRoles instanceof Array) || requiredRoles.length === 0) {\r\n      return true;\r\n    }\r\n    return requiredRoles.every((role) => this.roles.includes(role));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}