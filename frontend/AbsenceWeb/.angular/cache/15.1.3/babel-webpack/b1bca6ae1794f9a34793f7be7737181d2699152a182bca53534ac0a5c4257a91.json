{"ast":null,"code":"import _asyncToGenerator from \"D:/Files/EMSI/S9/JEE/gestion-des-absences/frontend/AbsenceWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"keycloak-angular\";\nexport class KeycloakSecurityService {\n  constructor(kcService) {\n    this.kcService = kcService;\n    this.ks = kcService;\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.kc = new Keycloak({\n        url: \"http://localhost:8888\",\n        realm: \"jee-realm\",\n        clientId: \"jee-client\"\n      }), yield _this.kc.init({\n        onLoad: 'check-sso',\n        checkLoginIframe: false\n      });\n    })();\n  }\n  hasRoleIn(roles) {\n    let userRoles = this.kcService.getUserRoles();\n    for (let role of roles) {\n      if (userRoles.includes(role)) return true;\n    }\n    return false;\n  }\n  initializer(keycloak) {\n    return () => {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            yield keycloak.init({\n              config: {\n                url: environment.keycloak.issuer,\n                realm: environment.keycloak.realm,\n                clientId: environment.keycloak.clientId\n              },\n              loadUserProfileAtStartUp: true,\n              initOptions: {\n                onLoad: 'check-sso',\n                checkLoginIframe: true\n              },\n              bearerExcludedUrls: []\n            });\n            resolve(1);\n          } catch (error) {\n            reject(error);\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    };\n  }\n}\nKeycloakSecurityService.ɵfac = function KeycloakSecurityService_Factory(t) {\n  return new (t || KeycloakSecurityService)(i0.ɵɵinject(i1.KeycloakService));\n};\nKeycloakSecurityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: KeycloakSecurityService,\n  factory: KeycloakSecurityService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,uBAAuB;EAKlCC,YAA6BC,SAA0B;IAA1B,cAAS,GAATA,SAAS;IACpC,IAAI,CAACC,EAAE,GAAGD,SAAS;EACrB;EAEME,IAAI;IAAA;IAAA;MACR,KAAI,CAACC,EAAE,GAAG,IAAIC,QAAQ,CAAC;QACrBC,GAAG,EAAC,uBAAuB;QAC3BC,KAAK,EAAE,WAAW;QAClBC,QAAQ,EAAE;OACX,CAAC,QACI,KAAI,CAACJ,EAAE,CAACD,IAAI,CAAC;QACjBM,MAAM,EAAE,WAAW;QACnBC,gBAAgB,EAAE;OACnB,CAAC;IAAC;EACL;EAEOC,SAAS,CAACC,KAAc;IAC7B,IAAIC,SAAS,GAAG,IAAI,CAACZ,SAAS,CAACa,YAAY,EAAE;IAC7C,KAAI,IAAIC,IAAI,IAAIH,KAAK,EAAC;MACpB,IAAIC,SAAS,CAACG,QAAQ,CAACD,IAAI,CAAC,EAAE,OAAO,IAAI;;IACzC,OAAO,KAAK;EAChB;EAEAE,WAAW,CAACC,QAAyB;IACnC,OAAO,MAAc;MACnB,OAAO,IAAIC,OAAO;QAAA,6BAAC,WAAOC,OAAO,EAAEC,MAAM,EAAI;UAC3C,IAAI;YACF,MAAMH,QAAQ,CAACf,IAAI,CAAC;cAClBmB,MAAM,EAAE;gBACNhB,GAAG,EAAEiB,WAAW,CAACL,QAAQ,CAACM,MAAM;gBAChCjB,KAAK,EAAEgB,WAAW,CAACL,QAAQ,CAACX,KAAK;gBACjCC,QAAQ,EAAEe,WAAW,CAACL,QAAQ,CAACV;eAChC;cACDiB,wBAAwB,EAAE,IAAI;cAC9BC,WAAW,EAAE;gBACXjB,MAAM,EAAE,WAAW;gBACnBC,gBAAgB,EAAE;eACnB;cACDiB,kBAAkB,EAAE;aACrB,CAAC;YACFP,OAAO,CAAC,CAAC,CAAC;WACX,CAAC,OAAOQ,KAAK,EAAE;YACdP,MAAM,CAACO,KAAK,CAAC;;QAEjB,CAAC;QAAA;UAAA;QAAA;MAAA,IAAC;IACJ,CAAC;EACH;;;mBAnDW7B,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAA8B,SAAvB9B,uBAAuB;EAAA+B,YAFtB;AAAM","names":["KeycloakSecurityService","constructor","kcService","ks","init","kc","Keycloak","url","realm","clientId","onLoad","checkLoginIframe","hasRoleIn","roles","userRoles","getUserRoles","role","includes","initializer","keycloak","Promise","resolve","reject","config","environment","issuer","loadUserProfileAtStartUp","initOptions","bearerExcludedUrls","error","factory","providedIn"],"sourceRoot":"","sources":["D:\\Files\\EMSI\\S9\\JEE\\gestion-des-absences\\frontend\\AbsenceWeb\\src\\app\\services\\keycloak-security.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport  {KeycloakInstance, KeycloakProfile} from \"keycloak-js\";\r\nimport  {KeycloakService, KeycloakEventType} from \"keycloak-angular\";\r\n\r\ndeclare var  Keycloak :any;\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class KeycloakSecurityService {\r\n  public profile? : KeycloakProfile;\r\n  public kc! :KeycloakInstance;\r\n  public ks! : KeycloakService;\r\n\r\n  constructor(private readonly kcService: KeycloakService) {\r\n    this.ks = kcService;\r\n  }\r\n\r\n  async init() {\r\n    this.kc = new Keycloak({\r\n      url:\"http://localhost:8888\",\r\n      realm: \"jee-realm\",\r\n      clientId: \"jee-client\"\r\n    }),\r\n    await this.kc.init({\r\n      onLoad: 'check-sso',\r\n      checkLoginIframe: false\r\n    });\r\n  }\r\n\r\n  public hasRoleIn(roles:string[]):boolean{\r\n    let userRoles = this.kcService.getUserRoles();\r\n    for(let role of roles){\r\n      if (userRoles.includes(role)) return true;\r\n    } return false;\r\n  }\r\n\r\n  initializer(keycloak: KeycloakService): () => Promise {\r\n    return (): Promise => {\r\n      return new Promise(async (resolve, reject) => {\r\n        try {\r\n          await keycloak.init({\r\n            config: {\r\n              url: environment.keycloak.issuer,\r\n              realm: environment.keycloak.realm,\r\n              clientId: environment.keycloak.clientId\r\n            },\r\n            loadUserProfileAtStartUp: true,\r\n            initOptions: {\r\n              onLoad: 'check-sso',\r\n              checkLoginIframe: true\r\n            },\r\n            bearerExcludedUrls: []\r\n          });\r\n          resolve(1);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      });\r\n    };\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}