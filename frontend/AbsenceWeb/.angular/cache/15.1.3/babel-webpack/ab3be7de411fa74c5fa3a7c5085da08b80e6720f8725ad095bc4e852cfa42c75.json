{"ast":null,"code":"import { KeycloakService, KeycloakEventType } from 'keycloak-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"keycloak-angular\";\nexport class SecurityService {\n  constructor(kcService) {\n    this.kcService = kcService;\n    this.init();\n  }\n  init() {\n    this.kcService.keycloakEvents$.subscribe({\n      next: e => {\n        if (e.type == KeycloakEventType.OnAuthSuccess) {\n          this.kcService.loadUserProfile().then(profile => {\n            this.profile;\n          });\n        }\n      }\n    });\n  }\n  hasRole(roles) {\n    let userRoles = this.kcService.getUserRoles();\n    for (let role of roles) {\n      if (userRoles.includes(role)) return true;\n    }\n    return false;\n  }\n}\nSecurityService.ɵfac = function SecurityService_Factory(t) {\n  return new (t || SecurityService)(i0.ɵɵinject(i1.KeycloakService));\n};\nSecurityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SecurityService,\n  factory: SecurityService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAA4BA,eAAe,EAAEC,iBAAiB,QAAQ,kBAAkB;;;AAOxF,OAAM,MAAOC,eAAe;EAExBC,YACWC,SAA2B;IAA3B,cAAS,GAATA,SAAS;IAEhB,IAAI,CAACC,IAAI,EAAE;EACf;EAEAA,IAAI;IACA,IAAI,CAACD,SAAS,CAACE,eAAe,CAACC,SAAS,CAAC;MACrCC,IAAI,EAAGC,CAAC,IAAI;QACR,IAAGA,CAAC,CAACC,IAAI,IAAIT,iBAAiB,CAACU,aAAa,EAAE;UAC1C,IAAI,CAACP,SAAS,CAACQ,eAAe,EAAE,CAACC,IAAI,CAAEC,OAAO,IAAG;YAC7C,IAAI,CAACA,OAAO;UAChB,CAAC,CAAC;;MAEV;KACH,CAAC;EACN;EAEOC,OAAO,CAACC,KAAe;IAC1B,IAAIC,SAAS,GAAG,IAAI,CAACb,SAAS,CAACc,YAAY,EAAE;IAC7C,KAAK,IAAIC,IAAI,IAAIH,KAAK,EAAE;MACpB,IAAGC,SAAS,CAACG,QAAQ,CAACD,IAAI,CAAC,EAAE,OAAO,IAAI;;IAC1C,OAAO,KAAK;EAClB;;AAzBSjB,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAmB,SAAfnB,eAAe;EAAAoB,YAFZ;AAAM","names":["KeycloakService","KeycloakEventType","SecurityService","constructor","kcService","init","keycloakEvents$","subscribe","next","e","type","OnAuthSuccess","loadUserProfile","then","profile","hasRole","roles","userRoles","getUserRoles","role","includes","factory","providedIn"],"sourceRoot":"","sources":["D:\\Files\\EMSI\\S9\\JEE\\gestion-des-absences\\frontend\\AbsenceWeb\\src\\app\\services\\security.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { KeycloakAuthGuard, KeycloakService, KeycloakEventType } from 'keycloak-angular'\r\nimport { KeycloakProfile } from 'keycloak-js'\r\n\r\ndeclare var KeycloakService\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SecurityService{\r\n    public profile? : KeycloakProfile;\r\n    constructor(\r\n        public kcService : KeycloakService\r\n    ) {\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        this.kcService.keycloakEvents$.subscribe({\r\n            next: (e) => {\r\n                if(e.type == KeycloakEventType.OnAuthSuccess) {\r\n                    this.kcService.loadUserProfile().then( profile => {\r\n                        this.profile;\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public hasRole(roles: string[]):boolean {\r\n        let userRoles = this.kcService.getUserRoles();\r\n        for (let role of roles) {\r\n            if(userRoles.includes(role)) return true;\r\n        } return false;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}