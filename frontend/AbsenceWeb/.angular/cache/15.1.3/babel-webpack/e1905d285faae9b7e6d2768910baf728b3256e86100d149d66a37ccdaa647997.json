{"ast":null,"code":"import _asyncToGenerator from \"D:/Files/EMSI/S9/JEE/gestion-des-absences/frontend/AbsenceWeb/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { KeycloakEventType } from \"keycloak-angular\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"keycloak-angular\";\nexport class KeycloakSecurityService {\n  constructor(kcService) {\n    this.kcService = kcService;\n    this.loadProfile();\n  }\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.kcInstance = new Keycloak({\n        url: \"http://localhost:8888\",\n        realm: \"jee-realm\",\n        clientId: \"jee-client\",\n        clientSecret: \"J4RYnRGulk5yTaTKHLcx7x5wJdEBhbHO\"\n      }), yield _this.kcInstance.init({\n        onLoad: 'check-sso',\n        checkLoginIframe: false\n      });\n    })();\n  }\n  loadProfile() {\n    this.kcService.keycloakEvents$.subscribe({\n      next: e => {\n        if (e.type == KeycloakEventType.OnAuthSuccess) {\n          this.kcService.loadUserProfile().then(profile => {\n            this.profile = profile;\n          });\n        }\n      }\n    });\n  }\n  hasRoleIn(roles) {\n    this.kcInstance.loadUserProfile().then(p => {\n      console.log(p);\n    }).catch(function () {\n      console.log('Failed to load user profile');\n    });\n    let userRoles = this.kcService.getUserRoles();\n    for (let role of roles) {\n      if (userRoles.includes(role)) return true;\n    }\n    return false;\n  }\n}\nKeycloakSecurityService.ɵfac = function KeycloakSecurityService_Factory(t) {\n  return new (t || KeycloakSecurityService)(i0.ɵɵinject(i1.KeycloakService));\n};\nKeycloakSecurityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: KeycloakSecurityService,\n  factory: KeycloakSecurityService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAEA,SAA0BA,iBAAiB,QAAO,kBAAkB;;;AAMpE,OAAM,MAAOC,uBAAuB;EAKlCC,YAAoBC,SAA0B;IAA1B,cAAS,GAATA,SAAS;IAC3B,IAAI,CAACC,WAAW,EAAE;EACpB;EAEMC,IAAI;IAAA;IAAA;MACR,KAAI,CAACC,UAAU,GAAG,IAAIC,QAAQ,CAAC;QAC7BC,GAAG,EAAC,uBAAuB;QAC3BC,KAAK,EAAE,WAAW;QAClBC,QAAQ,EAAE,YAAY;QACtBC,YAAY,EAAE;OACf,CAAC,QACI,KAAI,CAACL,UAAU,CAACD,IAAI,CAAC;QACzBO,MAAM,EAAE,WAAW;QACnBC,gBAAgB,EAAE;OACnB,CAAC;IAAC;EACL;EAEAT,WAAW;IACT,IAAI,CAACD,SAAS,CAACW,eAAe,CAACC,SAAS,CAAC;MACvCC,IAAI,EAAGC,CAAC,IAAI;QACV,IAAIA,CAAC,CAACC,IAAI,IAAIlB,iBAAiB,CAACmB,aAAa,EAAE;UAC7C,IAAI,CAAChB,SAAS,CAACiB,eAAe,EAAE,CAACC,IAAI,CAACC,OAAO,IAAE;YAC7C,IAAI,CAACA,OAAO,GAACA,OAAO;UACtB,CAAC,CAAC;;MAEN;KACD,CAAC;EACJ;EAEOC,SAAS,CAACC,KAAc;IAC7B,IAAI,CAAClB,UAAU,CAACc,eAAe,EAAE,CAC5BC,IAAI,CAAEI,CAAC,IAAI;MACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IAChB,CAAC,CAAC,CAACG,KAAK,CAAC;MACXF,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C,CAAC,CAAC;IACF,IAAIE,SAAS,GAAG,IAAI,CAAC1B,SAAS,CAAC2B,YAAY,EAAE;IAC7C,KAAI,IAAIC,IAAI,IAAIP,KAAK,EAAC;MACpB,IAAIK,SAAS,CAACG,QAAQ,CAACD,IAAI,CAAC,EAAE,OAAO,IAAI;;IACzC,OAAO,KAAK;EAChB;;;mBA7CW9B,uBAAuB;AAAA;;SAAvBA,uBAAuB;EAAAgC,SAAvBhC,uBAAuB;EAAAiC,YAFtB;AAAM","names":["KeycloakEventType","KeycloakSecurityService","constructor","kcService","loadProfile","init","kcInstance","Keycloak","url","realm","clientId","clientSecret","onLoad","checkLoginIframe","keycloakEvents$","subscribe","next","e","type","OnAuthSuccess","loadUserProfile","then","profile","hasRoleIn","roles","p","console","log","catch","userRoles","getUserRoles","role","includes","factory","providedIn"],"sourceRoot":"","sources":["D:\\Files\\EMSI\\S9\\JEE\\gestion-des-absences\\frontend\\AbsenceWeb\\src\\app\\services\\keycloak-security.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\r\nimport  {KeycloakInstance, KeycloakProfile} from \"keycloak-js\";\r\nimport  {KeycloakService, KeycloakEventType} from \"keycloak-angular\";\r\n\r\ndeclare var  Keycloak :any;\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class KeycloakSecurityService{\r\n  public profile? : KeycloakProfile;\r\n  public kcInstance! :KeycloakInstance;\r\n  userRoles?: string[];\r\n\r\n  constructor (public kcService: KeycloakService) {\r\n    this.loadProfile();\r\n  }\r\n\r\n  async init() {\r\n    this.kcInstance = new Keycloak({\r\n      url:\"http://localhost:8888\",\r\n      realm: \"jee-realm\",\r\n      clientId: \"jee-client\",\r\n      clientSecret: \"J4RYnRGulk5yTaTKHLcx7x5wJdEBhbHO\",\r\n    }),\r\n    await this.kcInstance.init({\r\n      onLoad: 'check-sso',\r\n      checkLoginIframe: false\r\n    });\r\n  }\r\n\r\n  loadProfile(){\r\n    this.kcService.keycloakEvents$.subscribe({\r\n      next: (e) => {\r\n        if (e.type == KeycloakEventType.OnAuthSuccess) {\r\n          this.kcService.loadUserProfile().then(profile=>{\r\n            this.profile=profile;\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public hasRoleIn(roles:string[]):boolean{\r\n    this.kcInstance.loadUserProfile()\r\n        .then((p) => {\r\n          console.log(p)\r\n        }).catch(function() {\r\n      console.log('Failed to load user profile');\r\n    })\r\n    let userRoles = this.kcService.getUserRoles();\r\n    for(let role of roles){\r\n      if (userRoles.includes(role)) return true;\r\n    } return false;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}